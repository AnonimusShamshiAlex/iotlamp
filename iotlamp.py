import socket
from yeelight import discover_bulbs, Bulb
import tinytuya
import time
import requests

# –ü–æ—Ä—Ç—ã, —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–∞–∑–Ω—ã–º–∏ –ª–∞–º–ø–∞–º–∏
COMMON_PORTS = {
    "Yeelight": [55443, 1982],
    "Tuya": [6666, 6668],
    "Tasmota/ESPHome": [80, 8080, 8888],
    "Generic": [5353, 5683, 8888]
}

def scan_ports(ip, ports):
    open_ports = []
    for port in ports:
        try:
            with socket.create_connection((ip, port), timeout=0.5):
                open_ports.append(port)
        except:
            continue
    return open_ports

def get_possible_ports(model):
    for name, ports in COMMON_PORTS.items():
        if name.lower() in model.lower():
            return ports
    return [55443, 6668, 8888]

# üü¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Yeelight
def scan_yeelight():
    print("üì° –ò—â—É Yeelight-–ª–∞–º–ø—ã...")
    bulbs = discover_bulbs(timeout=4)
    results = []
    for b in bulbs:
        ip = b.get("ip")
        model = b.get("model", "Yeelight")
        ports = get_possible_ports(model)
        open_ports = scan_ports(ip, ports)
        results.append({"brand": "Yeelight", "ip": ip, "model": model, "ports": open_ports})
    return results

# üî∂ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Tuya-—É—Å—Ç—Ä–æ–π—Å—Ç–≤
def scan_tuya():
    print("üì° –ò—â—É Tuya-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
    try:
        devices = tinytuya.deviceScan()
        results = []
        for ip, data in devices.items():
            results.append({
                "brand": "Tuya",
                "ip": ip,
                "model": data.get("product", "Tuya"),
                "ports": scan_ports(ip, COMMON_PORTS["Tuya"])
            })
        return results
    except Exception as e:
        print("‚ö† –û—à–∏–±–∫–∞ Tuya-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", e)
        return []

# üî∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (Tasmota, ESPHome –∏ —Ç.–¥.)
def scan_generic():
    print("üì° –ò—â—É –ø—Ä–æ—á–∏–µ IoT-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
    prefix = ".".join(socket.gethostbyname(socket.gethostname()).split(".")[:3])
    ips = [f"{prefix}.{i}" for i in range(1, 255)]

    found = []
    for ip in ips:
        ports = scan_ports(ip, COMMON_PORTS["Tasmota/ESPHome"])
        if ports:
            found.append({
                "brand": "Tasmota/Other",
                "ip": ip,
                "model": "Unknown",
                "ports": ports
            })
    return found

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Tasmota —á–µ—Ä–µ–∑ HTTP
def control_tasmota(ip):
    try:
        action = input("–í–≤–µ–¥–∏—Ç–µ 'on' –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ 'off' –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è Tasmota-–ª–∞–º–ø—ã: ").strip().lower()
        if action == "on":
            r = requests.get(f"http://{ip}/cm?cmnd=Power%20On", timeout=2)
        elif action == "off":
            r = requests.get(f"http://{ip}/cm?cmnd=Power%20Off", timeout=2)
        else:
            print("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            return
        if r.status_code == 200:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        else:
            print("‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã:", r.status_code)
    except Exception as e:
        print("‚ö† –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Tasmota:", e)

def main():
    all_devices = []
    all_devices += scan_yeelight()
    all_devices += scan_tuya()
    all_devices += scan_generic()

    if not all_devices:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    print("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    for i, d in enumerate(all_devices, 1):
        print(f"{i}. {d['brand']} ({d['ip']}) - –º–æ–¥–µ–ª—å: {d['model']}")
        print(f"    ‚ñ∏ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {d['ports'] or '–Ω–µ—Ç'}")

    try:
        choice = int(input("\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ")) - 1
        dev = all_devices[choice]

        if dev["brand"] == "Yeelight":
            bulb = Bulb(dev["ip"])
            action = input("–í–≤–µ–¥–∏—Ç–µ 'on' –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ 'off' –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è: ").strip().lower()
            if action == "on":
                bulb.turn_on()
                print("‚úÖ –í–∫–ª—é—á–µ–Ω–æ.")
            elif action == "off":
                bulb.turn_off()
                print("‚úÖ –í—ã–∫–ª—é—á–µ–Ω–æ.")
            else:
                print("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        elif dev["brand"].startswith("Tasmota") and 80 in dev["ports"]:
            control_tasmota(dev["ip"])
        else:
            print("‚ö† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
    except Exception as e:
        print("‚ö† –û—à–∏–±–∫–∞:", e)

if __name__ == "__main__":
    main()
